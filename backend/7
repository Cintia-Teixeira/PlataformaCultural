module.exports = app => {
  const { existsOrError, notExistsOrError } = app.api.validation

  const save = async(req, res) => {
    let eventP = {...req.body }
    if (req.params.id) eventP.id = req.params.id
    

    existsOrError(eventP.title, "Título não informado")
    existsOrError(eventP.userId, "Usuário não informado")
    existsOrError(eventP.categoryId, "Categoria não informada")
    existsOrError(eventP.description, "descrição não informado")
    existsOrError(eventP.date, "data não informada")

    eventP.createAt = new Date()
    if(eventP.id){
app.db('events').update().where({"id":eventP.id})
    }

    app.db('events').insert(eventP)
      .then(resp => {
        res.send("Evento salvo com sucesso")
      }).catch(err => {
        res.status(400).send(err)
      })

  }


  const getById = (req, res) => {
    let eventP = {}
    eventP.id = req.params.id

    const searchTopicsCategories = () =>{
     return app.db('eventPsCategories').select().where('topicId', topic.id)
        .then(resp => {
          eventP.categoriesTagged = resp
          res.json(eventP)
        }).catch(res.status(500).send(err))
    }

    const searchTopics = () => {
      return app.db('eventPs').select().where({ id: topic.id })
        .then(resp => {
          console.log(resp[0])
          eventP=resp[0]
          searchTopicsCategories()
        }).catch(res.status(500))
    }

    searchTopics()

  }

  let limit = 12
  const getMostRecent = (req, res) => {
    let page = parseInt( req.query.page ) || 0 
    const offset = (page) => {
      return page*limit
    }
    let settedOffset = offset(page) 
    console.log("set offset: ", settedOffset)
    preQuerie = `SELECT * FROM eventPs ORDER BY createAt DESC LIMIT ${settedOffset} , ${limit};`

    app.db.raw(preQuerie)
      .then(resp => {
        let data = {}
        data.page = page
        data.data = resp[0]
        console.log(data)
        res.json(data)
      }).catch(err => {
        res.status(500).send(err)
      })

  }

  const getMostReplyededs = (req, res) => {
    let page = parseInt( req.query.page ) || 0 
    const offset = (page) => {
      return page*limit
    }
    let settedOffset = offset(page) 
    console.log("set offset: ", settedOffset)
    preQuerie = `SELECT * FROM eventPs ORDER BY numerOfReplies DESC LIMIT ${settedOffset}, ${limit};`
    app.db.raw(preQuerie)
      .then(resp => {
        let data = {}
        data.page = page
        data.data = resp[0]
        console.log(data)
        res.json(data)
      }).catch(err => {
        res.status(500).send(err)
      })
  }

  return { save, getById, getMostRecent, getMostReplyededs }
}
